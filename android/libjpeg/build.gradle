apply plugin: "com.android.model.library"


model {
    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'

        defaultConfig {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 9
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 21
            moduleName = "jpeg"
            toolchain = 'clang'
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64']) //this is default
            ldLibs.addAll(['android', 'log'])
            stl = 'c++_static'
            cppFlags.add("-std=c++11")
            cppFlags.add("-fexceptions")
            cppFlags.add("-frtti")
            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
        }
        abis {
            create("armeabi") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi")
            }
            create("armeabi-v7a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi-v7a")
            }
            create("arm64-v8a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/arm64-v8a")
            }
            create("x86") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86")
            }
            create("x86_64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86_64")
            }
            create("mips") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/mips")
            }
            create("mips64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/mips64")
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "../../jpeg/"
                }
                source {
                    srcDirs '../../jpeg'
                    exclude 'ansi2knr.c'
                    exclude 'cdjpeg.c'
                    exclude 'cjpeg.c'
                    exclude 'ckconfig.c'
                    exclude 'djpeg.c'
                    exclude 'example.c'
                    exclude 'jmemdos.c'
                    exclude 'jmemmac.c'
                    exclude 'jmem-android.c'
                    exclude 'jmemname.c'
                    exclude 'jmemnobs.c'
                    exclude 'jpegtran.c'
                    exclude 'r*.c'
                    exclude 'transupp.c'
                    exclude 'w*.c'


//File list should be:
//                    jcapimin.c,
//                    jcapistd.c,
//                    jccoefct.c,
//                    jccolor.c,
//                    jcdctmgr.c,
//                    jchuff.c,
//                    jcinit.c,
//                    jcmainct.c,
//                    jcmarker.c,
//                    jcmaster.c,
//                    jcomapi.c,
//                    jcparam.c,
//                    jcphuff.c,
//                    jcprepct.c,
//                    jcsample.c,
//                    jctrans.c,
//                    jdapimin.c,
//                    jdapistd.c,
//                    jdatadst.c,
//                    jdatasrc.c,
//                    jdcoefct.c,
//                    jdcolor.c,
//                    jddctmgr.c,
//                    jdhuff.c,
//                    jdinput.c,
//                    jdmainct.c,
//                    jdmarker.c,
//                    jdmaster.c,
//                    jdmerge.c,
//                    jdphuff.c,
//                    jdpostct.c,
//                    jdsample.c,
//                    jdtrans.c,
//                    jerror.c,
//                    jfdctflt.c,
//                    jfdctfst.c,
//                    jfdctint.c,
//                    jidctflt.c,
//                    jidctint.c,
//                    jidctfst.c,
//                    jidctred.c,
//                    jquant1.c,
//                    jquant2.c,
//                    jutils.c,
//                    jmemmgr.c,
//                    jmemansi.c
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'io.github.igagis:libutki:+'
//    compile 'io.github.igagis:libpapki:+'
//    compile 'org.pugixml:pugixml:+'
}


//===================================
//=== Extract NDK files from AARs ===

task extractNDKLibs {
    doLast {
        configurations.compile.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}
build.dependsOn('extractNDKLibs')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile')) {
        task.dependsOn('extractNDKLibs')
    }
}



//=================================
//=== pack library files to aar ===


def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../jpeg") {
        include('**/*.h')
        into('ndkLibs/include/libjpeg')
    }
    from("build/intermediates/binaries/debug/lib"){
        include('**/*.a')
        into('ndkLibs')
    }
}

build.finalizedBy('copyNdkLibsToAAR')